// <auto-generated />
using FxMovies.FxMoviesDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FxMoviesDB.Migrations
{
    [DbContext(typeof(FxMoviesDbContext))]
    [Migration("20180217181948_AddedVodMovies")]
    partial class AddedVodMovies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("FxMovies.FxMoviesDB.Channel", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LogoL");

                    b.Property<string>("LogoM");

                    b.Property<string>("LogoS");

                    b.Property<string>("LogoS_Local");

                    b.Property<string>("Name");

                    b.HasKey("Code");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("FxMovies.FxMoviesDB.MovieEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certification");

                    b.Property<string>("ChannelCode");

                    b.Property<string>("Content");

                    b.Property<int>("Duration");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Genre");

                    b.Property<string>("ImdbId");

                    b.Property<int?>("ImdbRating");

                    b.Property<int?>("ImdbVotes");

                    b.Property<string>("PosterL");

                    b.Property<string>("PosterM");

                    b.Property<string>("PosterM_Local");

                    b.Property<string>("PosterS");

                    b.Property<string>("PosterS_Local");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Title");

                    b.Property<int?>("Year");

                    b.Property<string>("YeloUrl");

                    b.HasKey("Id");

                    b.HasIndex("ChannelCode");

                    b.ToTable("MovieEvents");
                });

            modelBuilder.Entity("FxMovies.FxMoviesDB.User", b =>
                {
                    b.Property<string>("ImdbUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LastRefreshRatingsResult");

                    b.Property<DateTime?>("LastRefreshRatingsTime");

                    b.Property<bool?>("LastRefreshSuccess");

                    b.Property<DateTime?>("LastUsageTime");

                    b.Property<long>("RefreshCount");

                    b.Property<DateTime?>("RefreshRequestTime");

                    b.Property<long>("Usages");

                    b.Property<string>("WatchListLastRefreshResult");

                    b.Property<bool?>("WatchListLastRefreshSuccess");

                    b.Property<DateTime?>("WatchListLastRefreshTime");

                    b.HasKey("ImdbUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FxMovies.FxMoviesDB.UserRating", b =>
                {
                    b.Property<string>("ImdbUserId");

                    b.Property<string>("ImdbMovieId");

                    b.Property<int>("Rating");

                    b.Property<DateTime>("RatingDate");

                    b.HasKey("ImdbUserId", "ImdbMovieId");

                    b.ToTable("UserRatings");
                });

            modelBuilder.Entity("FxMovies.FxMoviesDB.UserWatchListItem", b =>
                {
                    b.Property<string>("ImdbUserId");

                    b.Property<string>("ImdbMovieId");

                    b.Property<DateTime>("AddedDate");

                    b.HasKey("ImdbUserId", "ImdbMovieId");

                    b.ToTable("UserWatchLists");
                });

            modelBuilder.Entity("FxMovies.FxMoviesDB.VodMovie", b =>
                {
                    b.Property<string>("Provider");

                    b.Property<string>("ProviderCategory");

                    b.Property<int>("ProviderId");

                    b.Property<string>("Certification");

                    b.Property<string>("Image");

                    b.Property<string>("Image_Local");

                    b.Property<string>("ImdbId");

                    b.Property<int?>("ImdbRating");

                    b.Property<int?>("ImdbVotes");

                    b.Property<decimal>("Price");

                    b.Property<int>("PrividerId");

                    b.Property<int>("ProviderMask");

                    b.Property<string>("Title");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidUntil");

                    b.Property<int?>("Year");

                    b.HasKey("Provider", "ProviderCategory", "ProviderId");

                    b.ToTable("VodMovies");
                });

            modelBuilder.Entity("FxMovies.FxMoviesDB.MovieEvent", b =>
                {
                    b.HasOne("FxMovies.FxMoviesDB.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelCode");
                });
#pragma warning restore 612, 618
        }
    }
}
